{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Movie","props","className","title","src","poster","alt","year","App","useState","setTitle","result","setResult","handleSearch","tmp_list","request","url","json","err","res","body","Response","Search","movie","imdbID","key","Title","Poster","Year","Object","values","value","onChange","event","target","onKeyDown","keyCode","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mbAMA,SAASA,EAAMC,GACb,OACE,wBAAIC,UAAU,eACZ,wBAAIA,UAAU,cAAcC,MAAOF,EAAME,OAAQF,EAAME,OACvD,yBAAKD,UAAU,eAAeE,IAAKH,EAAMI,OAAQC,IAAI,YACrD,uBAAGJ,UAAU,cAAb,IAA4BD,EAAMM,KAAlC,MAoDSC,MA/Cf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNN,EADM,KACCO,EADD,OAEeD,mBAAS,IAFxB,mBAENE,EAFM,KAEEC,EAFF,KAcTC,EAAe,WACjB,IAAIC,EAAW,GAEfC,IAAQ,CACNC,IAAK,kDAAkDb,EACvDc,MAAM,IACL,SAACC,EAAKC,EAAKC,GACZ,GAAsB,UAAlBA,EAAKC,SAAsB,CAAC,IAAD,uBAC7B,YAAkBD,EAAKE,OAAvB,+CAA+B,CAAC,IAAvBC,EAAsB,QAC7BT,EAASS,EAAMC,QAAU,kBAACxB,EAAD,CAAOyB,IAAKF,EAAMC,OAAQrB,MAAOoB,EAAMG,MAAOrB,OAAQkB,EAAMI,OAAQpB,KAAMgB,EAAMK,QAF9E,kFAI7BhB,EAAUiB,OAAOC,OAAOhB,SAK9B,OACE,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,gBAAd,WAEF,yBAAKA,UAAU,aACb,2BAAOA,UAAU,eAAe6B,MAAO5B,EAAO6B,SAhCjC,SAAAC,GACjBvB,EAASuB,EAAMC,OAAOH,QA+BoDI,UA5BxD,SAAAF,GACI,KAAlBA,EAAMG,SACRvB,OA2BE,yBAAKX,UAAU,gBAAgBmC,QAASxB,GAAxC,WAEF,0BAAMX,UAAU,OAAhB,yCACA,yBAAKA,UAAU,iBACb,4BAAKS,MC7CP2B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,cAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,cAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.1dfb6b84.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './App.css'\nimport request from 'request'\n\n// var tmp_search_result = {\"Search\":[{\"Title\":\"Iron Man\",\"Year\":\"2008\",\"imdbID\":\"tt0371746\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\"},{\"Title\":\"Iron Man 3\",\"Year\":\"2013\",\"imdbID\":\"tt1300854\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMjE5MzcyNjk1M15BMl5BanBnXkFtZTcwMjQ4MjcxOQ@@._V1_SX300.jpg\"},{\"Title\":\"Iron Man 2\",\"Year\":\"2010\",\"imdbID\":\"tt1228705\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMTM0MDgwNjMyMl5BMl5BanBnXkFtZTcwNTg3NzAzMw@@._V1_SX300.jpg\"},{\"Title\":\"The Iron Giant\",\"Year\":\"1999\",\"imdbID\":\"tt0129167\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMjIxNDU2Njk0OV5BMl5BanBnXkFtZTgwODc3Njc3NjE@._V1_SX300.jpg\"},{\"Title\":\"The Man in the Iron Mask\",\"Year\":\"1998\",\"imdbID\":\"tt0120744\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BZjM2YzcxMmQtOTc2Mi00YjdhLWFlZjUtNmFmMDQzYzU2YTk5L2ltYWdlXkEyXkFqcGdeQXVyNTAyODkwOQ@@._V1_SX300.jpg\"},{\"Title\":\"Iron Fist\",\"Year\":\"2017â€“2018\",\"imdbID\":\"tt3322310\",\"Type\":\"series\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMjI5Mjg1NDcyOV5BMl5BanBnXkFtZTgwMjAxOTQ5MTI@._V1_SX300.jpg\"},{\"Title\":\"The Iron Lady\",\"Year\":\"2011\",\"imdbID\":\"tt1007029\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BODEzNDUyMDE3NF5BMl5BanBnXkFtZTcwMTgzOTg3Ng@@._V1_SX300.jpg\"},{\"Title\":\"Iron Sky\",\"Year\":\"2012\",\"imdbID\":\"tt1034314\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMTM2MDg5MzgxNF5BMl5BanBnXkFtZTcwODUzNjMxOA@@._V1_SX300.jpg\"},{\"Title\":\"The Man with the Iron Fists\",\"Year\":\"2012\",\"imdbID\":\"tt1258972\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMTg5ODI3ODkzOV5BMl5BanBnXkFtZTcwMTQxNjUwOA@@._V1_SX300.jpg\"},{\"Title\":\"3-Iron\",\"Year\":\"2004\",\"imdbID\":\"tt0423866\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMTM1ODIwNzM5OV5BMl5BanBnXkFtZTcwNjk5MDkyMQ@@._V1_SX300.jpg\"}],\"totalResults\":\"588\",\"Response\":\"True\"}\n\nfunction Movie(props) {\n  return (\n    <li className=\"movie_frame\">\n      <h1 className=\"movie_title\" title={props.title}>{props.title}</h1>\n      <img className=\"movie_poster\" src={props.poster} alt=\"ironman\"></img>\n      <p className=\"movie_year\">({props.year})</p>\n    </li>\n  )\n}\n\nfunction App() {\n  const [title, setTitle] = useState(\"\")\n  const [result, setResult] = useState([])\n\n  let handleChange = event => {\n    setTitle(event.target.value)\n  }\n\n  let handleKeyDown = event => {\n    if (event.keyCode === 13) {\n      handleSearch()\n    }\n  }\n\n  let handleSearch = () => {\n    let tmp_list = {}\n\n    request({\n      url: \"https://www.omdbapi.com:443/?apikey=58b0f6d3&s=\"+title,\n      json: true,\n    }, (err, res, body) => {\n      if (body.Response !== \"False\") {\n        for (let movie of body.Search) {\n          tmp_list[movie.imdbID] = <Movie key={movie.imdbID} title={movie.Title} poster={movie.Poster} year={movie.Year} />\n        }\n        setResult(Object.values(tmp_list))\n      }\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1 className=\"header_title\">HOOKED</h1>\n      </div>\n      <div className=\"searchbar\">\n        <input className=\"search_input\" value={title} onChange={handleChange} onKeyDown={handleKeyDown}/>\n        <div className=\"search_submit\" onClick={handleSearch}>SEARCH</div>\n      </div>\n      <span className=\"foo\">Sharing a few of our favourite movies</span>\n      <div className=\"search_result\">\n        <ul>{result}</ul>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}